{"name":"Tutorial User","notebooks":{"ky7ukwew00043f61jmkpka2e":{"name":"Getting Started","dateCreated":1641768508184,"dateModified":1641768508184,"sources":{},"variables":{},"cells":{"ky7ukwew00053f61k6sgmojk":{"type":"markdown","nextCell":"","nodes":{},"connections":{},"value":"\n# Getting Started\nThe NodeBooks app is created to make statisics-based experiments and notebooks easier, \nwithout needing to learn programming languages like Python. It tries to follow the \nworkflow of Jupyter Notebooks, as well as providing useful and commonly used tools \nto create statistical charts and plots of your data.\n\n## The Gist\nEach user can create their own notebooks. Each notebook can contain any number of \n**cells** - either a **Markdown Cell** for taking notes or a **Node Cell** for creating \ncharts and plots. To create either a **Node Cell** or a **Markdown Cell**, click one of\nthe two buttons at the bottom of a notebook.\n\n## Markdown Cells\n**Markdown Cells** work similarly to Jupyter Notebook's markdown cells. To learn more\nabout what you can do with the Markdown language, read the guide under the *Markdown Cells*\nnotebook on the sidebar.\n\n## Node Cells\n**Node Cells** are used to create charts and plots through a visual scripting system,\nwhere nodes are linked to each other to sequentially perform operations to the data. \nTo learn more about the visual scripting system, read the guide under the *Node Cells* \nnotebook on the sidebar.\n\n## Reorganizing Cells\nA cell can be moved around and reorganized by dragging the arrows at the top left of\na cell and moving it in between other cells.\n\n## Changing Cell Types\nThe type of a cell can be changed by clicking the button with 3 dots (options button)\nat the top left of a cell and clicking `Change To Markdown/Node`.\n\n## Deleting Cells\nA cell can be deleted by clicking the button with 3 dots (options button)\nat the top left of a cell and clicking `Delete`.\n"}}},"ky7ukwew00063f61t8dxlyuu":{"name":"Markdown Cells","dateCreated":1641768508184,"dateModified":1641768508184,"sources":{},"variables":{},"cells":{"ky7ukwew00073f61jjegseub":{"type":"markdown","nextCell":"","nodes":{},"connections":{},"value":"\n# Markdown Cells\n**Markdown Cells** are a great way to take down and format notes about your statistical\nexperiments in a clean and organized manner. Whenever you find Markdown cells in any\nnotebook, simply double-click on it to open the Markdown editor. Try it on me now!\n\n## Formatting\n### Italics\nWords, phrases, or even entire sentences can be italicized by enclosing them in star (`*`)\nsymbols, like so:\n\n**Markdown:** \\*Hey, I am italicized!\\*\n\n**Formatted:** *Hey, I am italicized!*\n\n### Bold\nSimilar to italics, words can be bolded by enclosing them in double star (`**`) symbols,\nlike so:\n\n**Markdown:** \\*\\*Hey, I am bold!\\*\\*\n\n**Formatted:** **Hey, I am bold!**\n\n> Note: These special symbols can be escaped by placing a backslash (`\\*`) before them, which\n> treats them like any other character. A backslash can \"escape\" only one symbol, so for\n> escaping two or more symbols, multiple backlash characters are needed, like so: `\\*\\*`\n\n### Headings\nHeadings are used to separate your notes into well-defined sections. Here are the \navailable headings and how each are written:\n\n# \\# Heading 1\n\n## \\## Heading 2\n\n### \\### Heading 3\n\n#### \\#### Heading 4\n\n##### \\##### Heading 5\n\n###### \\###### Heading 6\n\n### Links\nLinks are used to link to different websites or even local paths. They are\ncreated using this syntax:\n\n```\n[Name of the link](https://google.com)\n```\nand is formatted as such:\n\n[Name of the link](https://google.com)\n\n### Images\nImages can also be embedded onto a Markdown page using this syntax:\n\n```\n![Name of the image](https://picsum.photos/200/300)\n```\nand is formatted as such:\n\n![Name of the image](https://picsum.photos/200/300)\n\n> Note: For both links and images, specifying their urls can be deferred to a later\n> part of the notebook by using a number surrounded by square brackets instead of a url\n> surrounded by parenthesis. Here is an example:\n\n```\n[Name of the link 2][1]\n![Name of the image 2][2]\n\n...\nsomething something\n...\n\n[1]: https://github.com\n[2]: https://picsum.photos/400/200\n```\nand is formatted as such:\n\n[Name of the link 2][1]\n![Name of the image 2][2]\n\n[1]: https://github.com\n[2]: https://picsum.photos/400/200\n\n### Blockquotes\nBlockquotes are useful for quoting text passages, or even creating warning notes! It\nis created like so:\n\n```\n> I am a quote!\n```\nand is formatted as such:\n\n> I am a quote!\n\n### Bulleted Lists\nLists are useful for, well, listing stuff! There are two ways to create lists: one\nuses the star (`*`) symbol, while the other uses the dash (`-`) symbol. Both methods\ncreate the same kind of list. Here is how they are written:\n\n```\n* Item 1\n* Item 2\n* Item 3\n\n- Item 1\n- Item 2\n- Item 3\n```\nand is formatted as such:\n\n* Item 1\n* Item 2\n* Item 3\n\n- Item 1\n- Item 2\n- Item 3\n\n### Numbered Lists\nSimilar to bulleted lists, there are two ways to create numbered lists: a number \nfollowed by either a dot (`.`) or a closing parenthesis (`)`). Here is how they are\nwritten:\n\n```\n1. Item 1\n2. Item 2\n3. Item 3\n\n1) Item 1\n2) Item 2\n3) Item 3\n```\nand is formatted as such:\n\n1. Item 1\n2. Item 2\n3. Item 3\n\n1) Item 1\n2) Item 2\n3) Item 3\n\n### Horizontal Rule\nHorizontal rules can be created to visually separate sections of your notebook with\na line. Here is how they are created:\n\n```\n---\n```\nand is formatted as such:\n\n---\n\n### Code\nCode can be written either inline (within a sentence) or as a code block. Here is how they are written:\n\n```\nI am an `inline code!` I look cool, right?\n\n\\```\nI am a code block!\n\\```\n```\nand is formatted as such:\n\nI am an `inline code!` I look cool, right?\n\n```\nI am a code block!\n```\n\n## Conclusion\nThose are the basics to creating Markdown documents! Feel free to experiment various \nways of writing in Markdown to find the writing style that fits you.\n\nMore details could be found in the official [CommonMark](https://commonmark.org/help/) documentation.\n"}}},"ky7ukwew00083f61zn9puf7p":{"name":"Node Cells","dateCreated":1641768508184,"dateModified":1641768508184,"sources":{},"variables":{},"cells":{"ky7ukwew00093f61x9thlwgu":{"type":"markdown","nextCell":"","nodes":{},"connections":{},"value":"\n# Node Cells\nThe node system is a great way to visually script your statistical experiments and\ncreate graphs and plots without writing any code at all! A node cell contains nodes \nthat can be added, dragged around, and deleted within the node cell. Here are the list\nof things you can do within a node cell.\n\n## Adding Nodes\nNodes can be added by clicking the **Add Node** button at the top left of the node cell.\nThis shows a list of node categories that can be opened and contains the nodes within them.\nClicking the **Create** button to the right of a node adds it to the node cell. Multiple\nnodes can be added in this way before clicking the **Done** button at the bottom of the \npanel.\n\n## Clicking Nodes\nNodes can be clicked, which will show the node inputs and properties on the left sidebar.\nNode inputs are populated only when a node slot in a node does not have an incoming \nconnection and is either a string, number, or boolean type. Node properties are always\npopulated with the node's own properties. Changing these properties also changes the\nbehavior of the node in different ways. Clicking the **Help** button at the top of the \nsidebar will open a help pop-up that will show more information about how to use a \nparticular node.\n\n## Dragging Nodes\nNodes can be dragged around the node cell. The name of the node can also be edited by\nclicking on the name at the top bar of a node.\n\n## Deleting Nodes\nNodes can be deleted by clicking on the red circle with an X on the top right of a node.\nThis also automatically deletes any connections going in or out of this node. A node \ncan also be deleted by clicking the `Delete` key on the keyboard.\n\n# Node Categories\nThere are different categories of nodes: `base`, `math`, `chart`, and `dataframe`.\n\n## Base\nThe **Base** category contains basic nodes. For now, only the **Primitive Output** node \nexists in this category, which is used to output string, number, and boolean values.\n\n> Note: Output nodes are nodes that can output different things, like text, chart,\n> and tables, onto the **Output Log**. The **Output Log** can be found below a node\n> cell and is populated once the **Run** button is clicked and if there are any output\n> nodes in the node cell.\n\n## Math\nThe **Math** category contains nodes that operate on numbers.\n\n## Chart\nThe **Chart** category contains nodes that output charts based on their inputs.\n\n## Dataframe\nThe **Dataframe** category contains nodes that operate on dataframes, which are \ntables containing data.\n"}}},"ky7ukwew000a3f618jx784wb":{"name":"Example Notebook","dateCreated":1641768508184,"dateModified":1641768508184,"cells":{"ky7ukwew000b3f61ph25hxkx":{"type":"markdown","nodes":{},"connections":{},"nextCell":"ky7ukzrb00153f61u8l50pc7","value":"\n# Titanic - Exploratory Data Analysis\n\nThis example notebook demonstrates how to use the various nodes featured in\nthis app. The notebook analyzes the Titanic dataset [found here,](https://www.openml.org/d/40945) \nwhich is licensed under the Public Domain. However, this notebook will not do\na full analysis of the dataset, only enough to showcase the various nodes in\nthis app.\n\nTo see all the outputs at once, click the `Run All` button at the top of this \nnotebook.\n\n## Describe DataFrame\nThe **Describe DataFrame** node is used to get a feel for the numerical data within a\nDataFrame. Since this node works only with numerical data, it is best to remove\nnon-numerical columns before using this node. Furthermore, null values must be \nfilled for this node to work. The clean numerical data can also be saved to a\nvariable for future use in this notebook.\n\nThe node cell below demonstrates one way to utilize other nodes with this node\nto describe a DataFrame.\n\n> Note: The Titanic Data node below can be added to the node cell by going to\n> the *Data Sources* tab on the left sidebar and dragging the **Titanic Data**\n> source to the node cell.\n"},"ky7ukzrb00153f61u8l50pc7":{"type":"node","nextCell":"ky7utllu00673f61836fy6eb","connections":{"ky7ull2z001r3f615tbpjd43":{"fromNodeId":"cky7ul2eh004s3f69mwvb2zfr","fromSlotId":"output","toNodeId":"ky7ulim4001j3f61azf03fxe","toSlotId":"input"},"ky7ulrmm00233f61iod2nyoj":{"fromNodeId":"ky7ulim4001j3f61azf03fxe","fromSlotId":"output","toNodeId":"ky7ulouw001v3f61ksyzjt9e","toSlotId":"input"},"ky7ulx8w002f3f6187l14ruf":{"fromNodeId":"ky7ulouw001v3f61ksyzjt9e","fromSlotId":"output","toNodeId":"ky7uluci00273f611mdwmif1","toSlotId":"input"},"ky7um5a1002r3f61883x3a6i":{"fromNodeId":"ky7uluci00273f611mdwmif1","fromSlotId":"output","toNodeId":"ky7um2sj002j3f612yv3lrqf","toSlotId":"input"},"ky7urxoq005m3f61i7nttu8b":{"fromNodeId":"ky7ulouw001v3f61ksyzjt9e","fromSlotId":"output","toNodeId":"cky7urp3n01qz3f69kaonplg7","toSlotId":"input"}},"nodes":{"cky7ul2eh004s3f69mwvb2zfr":{"name":"Titanic Data","type":"base:csv-source","inputValues":[],"coords":{"x":38,"y":77},"properties":[{"id":"sourceId","value":"ky7ukwew00003f61vd3yuohz"}]},"cky7urp3n01qz3f69kaonplg7":{"name":"Set Clean Num Data","type":"base:Variables:DataFrame-variable-setter","inputValues":[],"coords":{"x":637,"y":164},"properties":[{"id":"variableId","value":"ky7urkv2005c3f61yt9li8pj"}]},"ky7ulim4001j3f61azf03fxe":{"name":"Get Numerical Columns","type":"dataframe:Query:numerical-column-dataframe","properties":[],"inputValues":[],"coords":{"x":214,"y":77}},"ky7ulouw001v3f61ksyzjt9e":{"name":"Fill Null DataFrame","type":"dataframe:Modify:fillna-dataframe","inputValues":[],"coords":{"x":441,"y":78},"properties":[{"id":"mappings","value":"age:$mean, ticket:$mean, fare:$mean"}]},"ky7uluci00273f611mdwmif1":{"name":"Describe DataFrame","type":"dataframe:Descriptive:describe-dataframe","properties":[],"inputValues":[],"coords":{"x":632,"y":80}},"ky7um2sj002j3f612yv3lrqf":{"name":"DataFrame Output","type":"dataframe:Output:dataframe-output","properties":[],"inputValues":[],"coords":{"x":833,"y":80}}}},"ky7utllu00673f61836fy6eb":{"type":"markdown","nextCell":"ky7ux7dk00773f61b3g0cl1w","value":"## DataFrame Head\nThe **DataFrame Head** node is another way to easily see how our DataFrame \nactually looks like. It shows the top few rows and the columns available on the DataFrame.\n\n> Note: For the variables set in the previous node cell to work, the previous\n> node cell has to be run first to properly set the variable. The `Run All` button\n> at the top of the notebook also runs all cells in order."},"ky7ux7dk00773f61b3g0cl1w":{"type":"node","nextCell":"ky7x4ugd000z3f61540fqsvf","connections":{"ky7v084r007u3f61mfxjfsi0":{"fromNodeId":"cky7uzyd903o83f69lgxects5","fromSlotId":"output","toNodeId":"ky7v05d8007m3f61c3rcvsvy","toSlotId":"input"},"ky7v0fbc00863f61c1146etl":{"fromNodeId":"ky7v05d8007m3f61c3rcvsvy","fromSlotId":"output","toNodeId":"ky7v0csh007y3f61fyx6wr3m","toSlotId":"input"}},"nodes":{"cky7uzyd903o83f69lgxects5":{"name":"Get Clean Num Data","type":"base:Variables:DataFrame-variable-getter","inputValues":[],"coords":{"x":50,"y":50},"properties":[{"id":"variableId","value":"ky7urkv2005c3f61yt9li8pj"}]},"ky7v05d8007m3f61c3rcvsvy":{"name":"DataFrame Head","type":"dataframe:Descriptive:head-dataframe","properties":[],"inputValues":[],"coords":{"x":232,"y":56}},"ky7v0csh007y3f61fyx6wr3m":{"name":"DataFrame Output","type":"dataframe:Output:dataframe-output","properties":[],"inputValues":[],"coords":{"x":414,"y":53}}}},"ky7x4ugd000z3f61540fqsvf":{"type":"markdown","nextCell":"ky7xanh2001u3f61t1b96eiu","value":"## Map and Merge DataFrame\nNow, we have a clean, numerical DataFrame to work with. However, there\nis one more numerical column that we missed because of how its missing\nvalues were handled: the *body* column. Instead of having null values, the \nbody column had `?` characters instead.\n\nThis column can be fixed using the **Map DataFrame** node and added onto \nthe numerical DataFrame using the **Merge DataFrames** node.\n\nFurthermore, there is another non-numerical column from the data that may\nbe helpful for this analysis: the *sex* column. That column can be merged into\nour numerical DataFrame as well."},"ky7xanh2001u3f61t1b96eiu":{"type":"node","nextCell":"ky7yu6sj001c3f61nmijf33f","connections":{"ky7xbogz002q3f61jzmho02b":{"fromNodeId":"cky7xb5q301pz3f69yu3u6ul4","fromSlotId":"output","toNodeId":"ky7xblms002i3f617jg4npve","toSlotId":"input"},"ky7xdyjg00513f61hdozmkwj":{"fromNodeId":"ky7xblms002i3f617jg4npve","fromSlotId":"output","toNodeId":"ky7xdufh004p3f61x0gg9v2j","toSlotId":"input"},"ky7xeolv00693f617pqulyl0":{"fromNodeId":"cky7xaufh01iw3f69rca2korr","fromSlotId":"output","toNodeId":"ky7xejxq00613f61sxyp3dc9","toSlotId":"left"},"ky7xeptz006d3f61b40vn7kw":{"fromNodeId":"ky7xdufh004p3f61x0gg9v2j","fromSlotId":"output","toNodeId":"ky7xejxq00613f61sxyp3dc9","toSlotId":"right"},"ky9idg5b001n3f618odndsxa":{"fromNodeId":"cky7xb5q301pz3f69yu3u6ul4","fromSlotId":"output","toNodeId":"ky9id6fh001f3f618zv9j1xs","toSlotId":"input"},"ky9iecdi002p3f617hdc0l1e":{"fromNodeId":"ky9ie3go00273f61u0zd5q47","fromSlotId":"output","toNodeId":"ky7xeyk3006l3f61a11v47n2","toSlotId":"input"},"ky9ieend002v3f61rmr4grrf":{"fromNodeId":"ky9ie3go00273f61u0zd5q47","fromSlotId":"output","toNodeId":"cky7yko1n007e3f697qm4eh6c","toSlotId":"input"},"ky9iegy0002z3f61ghxdsq9i":{"fromNodeId":"ky7xejxq00613f61sxyp3dc9","fromSlotId":"output","toNodeId":"ky9ie3go00273f61u0zd5q47","toSlotId":"left"},"ky9iend000373f61sjmtq6c1":{"fromNodeId":"ky9id6fh001f3f618zv9j1xs","fromSlotId":"output","toNodeId":"ky9ie3go00273f61u0zd5q47","toSlotId":"right"}},"nodes":{"cky7xaufh01iw3f69rca2korr":{"name":"Get Clean Num Data","type":"base:Variables:DataFrame-variable-getter","inputValues":[],"coords":{"x":388.2,"y":223.03999999999985},"properties":[{"id":"variableId","value":"ky7urkv2005c3f61yt9li8pj"}]},"cky7xb5q301pz3f69yu3u6ul4":{"name":"Titanic Data","type":"base:csv-source","inputValues":[],"coords":{"x":21,"y":52},"properties":[{"id":"sourceId","value":"ky7ukwew00003f61vd3yuohz"}]},"cky7yko1n007e3f697qm4eh6c":{"name":"Set Clean Num Data","type":"base:Variables:DataFrame-variable-setter","inputValues":[],"coords":{"x":1097.437,"y":350.56648437499996},"properties":[{"id":"variableId","value":"ky7urkv2005c3f61yt9li8pj"}]},"ky7xblms002i3f617jg4npve":{"name":"Map DataFrame","type":"dataframe:Modify:map-dataframe","inputValues":[],"coords":{"x":194,"y":51},"properties":[{"id":"column","value":"body"},{"id":"mappings","value":"?:$mean"},{"id":"replaceColumn","value":true}]},"ky7xdufh004p3f61x0gg9v2j":{"name":"DataFrame To Series","type":"converter:dataframe-to-series","inputValues":[],"coords":{"x":409.89994553719026,"y":102.92904616735537},"properties":[{"id":"column","value":"body"}]},"ky7xejxq00613f61sxyp3dc9":{"name":"Merge DataFrames","type":"dataframe:Modify:merge-dataframe","properties":[],"inputValues":[],"coords":{"x":585.077962066116,"y":199.09233542355372}},"ky7xeyk3006l3f61a11v47n2":{"name":"DataFrame Output","type":"dataframe:Output:dataframe-output","properties":[],"inputValues":[],"coords":{"x":1082.7979620661158,"y":192.45217917355365}},"ky9id6fh001f3f618zv9j1xs":{"name":"DataFrame To Series","type":"converter:dataframe-to-series","inputValues":[],"coords":{"x":247,"y":351},"properties":[{"id":"column","value":"sex"}]},"ky9ie3go00273f61u0zd5q47":{"name":"Merge DataFrames","type":"dataframe:Modify:merge-dataframe","properties":[],"inputValues":[],"coords":{"x":816,"y":327}}}},"ky7yu6sj001c3f61nmijf33f":{"type":"markdown","nextCell":"ky7yx79y002a3f61psd1mncw","value":"## Charts\nNow that we have a clean, numerical DataFrame, we can now do some charting!\n\n### Simple Charts\nThe **Line Chart** and **Bar Chart** nodes can be utilized to visualize our \ndata. We make good use of the **Group Count** node to see the distribution\nof our data."},"ky7yx79y002a3f61psd1mncw":{"type":"node","nextCell":"ky9igaso003w3f61zj9hqbog","connections":{"ky7zbkp1002b3f61otrzun5n":{"fromNodeId":"cky7yxiqe01fq3f69xxrippox","fromSlotId":"output","toNodeId":"ky7zb61x001l3f61ajemj9m3","toSlotId":"input"},"ky7zckir003z3f6176t9cb5r":{"fromNodeId":"ky7zb61x001l3f61ajemj9m3","fromSlotId":"result","toNodeId":"ky7zcch7003b3f618jb16wr8","toSlotId":"input"},"ky7zcluk00433f61vxfoa3op":{"fromNodeId":"ky7zb61x001l3f61ajemj9m3","fromSlotId":"result","toNodeId":"ky7zccqk003f3f61clqou1rz","toSlotId":"input"},"ky808mfm000z3f619ez7mnup":{"fromNodeId":"ky7zcch7003b3f618jb16wr8","fromSlotId":"output","toNodeId":"ky808jwp000r3f614qmkq1a1","toSlotId":"labels"},"ky808nob00133f611kijiv7e":{"fromNodeId":"ky7zccqk003f3f61clqou1rz","fromSlotId":"output","toNodeId":"ky808jwp000r3f614qmkq1a1","toSlotId":"data"},"ky9hpzw3005q3f61wmu0hpjr":{"fromNodeId":"cky7yxiqe01fq3f69xxrippox","fromSlotId":"output","toNodeId":"ky9hpst3005i3f61w6waylm2","toSlotId":"input"},"ky9hseda007e3f61iiq3vjoq":{"fromNodeId":"ky9hpst3005i3f61w6waylm2","fromSlotId":"result","toNodeId":"ky9hrvx9006q3f61r5b9usd4","toSlotId":"input"},"ky9hsg8m007i3f61kwj2c5nn":{"fromNodeId":"ky9hpst3005i3f61w6waylm2","fromSlotId":"result","toNodeId":"ky9hrw7k006u3f618846cghi","toSlotId":"input"},"ky9hspls007u3f61efkmlrbv":{"fromNodeId":"ky9hrvx9006q3f61r5b9usd4","fromSlotId":"output","toNodeId":"ky9hslg3007m3f61zjmbm50p","toSlotId":"labels"},"ky9hsr6d007y3f6104xkurlu":{"fromNodeId":"ky9hrw7k006u3f618846cghi","fromSlotId":"output","toNodeId":"ky9hslg3007m3f61zjmbm50p","toSlotId":"data"}},"nodes":{"cky7yxiqe01fq3f69xxrippox":{"name":"Get Clean Num Data","type":"base:Variables:DataFrame-variable-getter","inputValues":[],"coords":{"x":14,"y":68},"properties":[{"id":"variableId","value":"ky7urkv2005c3f61yt9li8pj"}]},"ky7zb61x001l3f61ajemj9m3":{"name":"Group Count","type":"dataframe:Grouping:group-count-dataframe","inputValues":[],"coords":{"x":178,"y":97},"properties":[{"id":"groupColumns","value":"survived"},{"id":"isPercent","value":true}]},"ky7zcch7003b3f618jb16wr8":{"name":"DataFrame To Series","type":"converter:dataframe-to-series","inputValues":[],"coords":{"x":384.35999999999996,"y":49.10000000000001},"properties":[{"id":"column","value":"survived"}]},"ky7zccqk003f3f61clqou1rz":{"name":"DataFrame To Series","type":"converter:dataframe-to-series","inputValues":[],"coords":{"x":385.67,"y":128.61999999999998},"properties":[{"id":"column","value":"Count"}]},"ky808jwp000r3f614qmkq1a1":{"name":"Bar Chart","type":"chart:Output:bar-chart-output","inputValues":[],"coords":{"x":574,"y":64},"properties":[{"id":"title","value":"Survived vs Not Survived Percent"}]},"ky9hpst3005i3f61w6waylm2":{"name":"Group Count","type":"dataframe:Grouping:group-count-dataframe","inputValues":[],"coords":{"x":184,"y":226},"properties":[{"id":"groupColumns","value":"sibsp"}]},"ky9hrvx9006q3f61r5b9usd4":{"name":"DataFrame To Series","type":"converter:dataframe-to-series","inputValues":[],"coords":{"x":387,"y":218},"properties":[{"id":"column","value":"sibsp"}]},"ky9hrw7k006u3f618846cghi":{"name":"DataFrame To Series","type":"converter:dataframe-to-series","inputValues":[],"coords":{"x":385,"y":312},"properties":[{"id":"column","value":"Count"}]},"ky9hslg3007m3f61zjmbm50p":{"name":"Line Chart","type":"chart:Output:line-chart-output","inputValues":[],"coords":{"x":578,"y":243},"properties":[{"id":"title","value":"Sibling Distribution"}]}}},"ky9igaso003w3f61zj9hqbog":{"type":"markdown","nextCell":"ky9irt9c001e3f6129lb8n3y","value":"### Violin and Box Plots\nThe **Violin Plot** and **Box Plot** chart nodes may also be used to see\nhow distributed a column is in relation to another column."},"ky9irt9c001e3f6129lb8n3y":{"type":"node","nextCell":"ky9jl9nn00343f61u2ux7r0d","connections":{"ky9iw4io00273f61d1oqjjg5":{"fromNodeId":"cky9iuryc006k3f69pcll29rg","fromSlotId":"output","toNodeId":"ky9ivzce001r3f61ntppyino","toSlotId":"input"},"ky9jh1yi000y3f614fwmlguw":{"fromNodeId":"ky9ivzce001r3f61ntppyino","fromSlotId":"output","toNodeId":"ky9ivatl00103f61aavx2xt4","toSlotId":"data"},"ky9jk9ex001y3f61pjwmsofz":{"fromNodeId":"cky9iuryc006k3f69pcll29rg","fromSlotId":"output","toNodeId":"ky9jjpf2001i3f61hkr3f71e","toSlotId":"input"},"ky9jkbnn00223f61s4luthpz":{"fromNodeId":"ky9jjpf2001i3f61hkr3f71e","fromSlotId":"output","toNodeId":"ky9jk22n001m3f61x0pszk0y","toSlotId":"data"}},"nodes":{"cky9iuryc006k3f69pcll29rg":{"name":"Get Clean Num Data","type":"base:Variables:DataFrame-variable-getter","inputValues":[],"coords":{"x":26,"y":83},"properties":[{"id":"variableId","value":"ky7urkv2005c3f61yt9li8pj"}]},"ky9ivatl00103f61aavx2xt4":{"name":"Violin Plot","type":"chart:Output:violin-plot-output","inputValues":[],"coords":{"x":385,"y":82},"properties":[{"id":"title","value":"Survival based on # of Siblings"},{"id":"labelsColumn","value":"survived"}]},"ky9ivzce001r3f61ntppyino":{"name":"DataFrame Loc","type":"dataframe:Query:loc-dataframe","inputValues":[],"coords":{"x":197,"y":87},"properties":[{"id":"columns","value":"survived, sibsp"}]},"ky9jjpf2001i3f61hkr3f71e":{"name":"DataFrame Loc","type":"dataframe:Query:loc-dataframe","inputValues":[],"coords":{"x":199.00000000000006,"y":197.00000000000006},"properties":[{"id":"columns","value":"survived, age"}]},"ky9jk22n001m3f61x0pszk0y":{"name":"Box Plot","type":"chart:Output:box-plot-output","inputValues":[],"coords":{"x":390.0000000000001,"y":196.00000000000003},"properties":[{"id":"title","value":"Survival based on Age"},{"id":"labelsColumn","value":"survived"}]}}},"ky9jl9nn00343f61u2ux7r0d":{"type":"markdown","nextCell":"ky9jn8eo00453f61z4jy997m","value":"### More Charts\nHere are some more charts to look for more patterns in the data."},"ky9jn8eo00453f61z4jy997m":{"type":"node","nextCell":"","connections":{"ky9jtad500673f615jsgkxi0":{"fromNodeId":"ky9jqyy000533f61067t1s85","fromSlotId":"result","toNodeId":"ky9jt3rn005r3f61e4yxknyw","toSlotId":"input"},"ky9jtcza006b3f61r8lhbxpw":{"fromNodeId":"ky9jqyy000533f61067t1s85","fromSlotId":"result","toNodeId":"ky9jt3xk005v3f616k02phfv","toSlotId":"input"},"ky9k2uht003v3f61fvg9stfw":{"fromNodeId":"cky9jo7tt02dm3f69bp9cs7bk","fromSlotId":"output","toNodeId":"ky9jq24y004j3f61cbzkvu82","toSlotId":"input"},"ky9klv4f00163f619f1eq917":{"fromNodeId":"ky9jq24y004j3f61cbzkvu82","fromSlotId":"output","toNodeId":"ky9jqyy000533f61067t1s85","toSlotId":"input"},"ky9kmby2002w3f61vb5e6323":{"fromNodeId":"ky9jt3rn005r3f61e4yxknyw","fromSlotId":"output","toNodeId":"ky9km7pt002o3f61v2zq240g","toSlotId":"labels"},"ky9kmdj900303f61hhlwaq3g":{"fromNodeId":"ky9jt3xk005v3f616k02phfv","fromSlotId":"output","toNodeId":"ky9km7pt002o3f61v2zq240g","toSlotId":"data"},"ky9koud3003g3f612cs7i0l6":{"fromNodeId":"cky9jo7tt02dm3f69bp9cs7bk","fromSlotId":"output","toNodeId":"ky9koorf00383f61j74qn6vx","toSlotId":"input"},"ky9kq6xw004g3f61twraah4x":{"fromNodeId":"ky9koorf00383f61j74qn6vx","fromSlotId":"output","toNodeId":"ky9kpdi1003s3f61mf4r9uys","toSlotId":"input"},"ky9kq93c004k3f610g3756bt":{"fromNodeId":"ky9kpdi1003s3f61mf4r9uys","fromSlotId":"result","toNodeId":"ky9kpujf003w3f61qv0zmxn1","toSlotId":"input"},"ky9kqat6004o3f61k5owrtwj":{"fromNodeId":"ky9kpdi1003s3f61mf4r9uys","fromSlotId":"result","toNodeId":"ky9kpw2f00403f616jtm7b12","toSlotId":"input"},"ky9kqr7p00583f61uj1uoapq":{"fromNodeId":"ky9kpujf003w3f61qv0zmxn1","fromSlotId":"output","toNodeId":"ky9kqmin00503f61ln7v99bh","toSlotId":"labels"},"ky9kqtn8005c3f61y1cl2oax":{"fromNodeId":"ky9kpw2f00403f616jtm7b12","fromSlotId":"output","toNodeId":"ky9kqmin00503f61ln7v99bh","toSlotId":"data"},"ky9ktsww00803f617rwfxue4":{"fromNodeId":"ky9jq24y004j3f61cbzkvu82","fromSlotId":"output","toNodeId":"ky9ktew2007k3f619ff4l21r","toSlotId":"input"},"ky9ku3l000883f61jhgxv7ul":{"fromNodeId":"ky9ktew2007k3f619ff4l21r","fromSlotId":"output","toNodeId":"ky9ktk62007o3f61tdpk2d57","toSlotId":"input"},"ky9kufha008k3f6192y84h59":{"fromNodeId":"ky9ktk62007o3f61tdpk2d57","fromSlotId":"labels","toNodeId":"ky9kuanh008c3f61emqnmnxg","toSlotId":"labels"},"ky9kuifi008s3f61ed48y5oj":{"fromNodeId":"ky9ktk62007o3f61tdpk2d57","fromSlotId":"count","toNodeId":"ky9kuanh008c3f61emqnmnxg","toSlotId":"data"}},"nodes":{"cky9jo7tt02dm3f69bp9cs7bk":{"name":"Get Clean Num Data","type":"base:Variables:DataFrame-variable-getter","inputValues":[],"coords":{"x":42,"y":89},"properties":[{"id":"variableId","value":"ky7urkv2005c3f61yt9li8pj"}]},"ky9jq24y004j3f61cbzkvu82":{"name":"DataFrame Loc","type":"dataframe:Query:loc-dataframe","inputValues":[],"coords":{"x":231,"y":106},"properties":[{"id":"rows","value":"survived == 1"}]},"ky9jqyy000533f61067t1s85":{"name":"Group Count","type":"dataframe:Grouping:group-count-dataframe","inputValues":[],"coords":{"x":444,"y":110},"properties":[{"id":"groupColumns","value":"sex"},{"id":"isPercent","value":true}]},"ky9jt3rn005r3f61e4yxknyw":{"name":"DataFrame To Series","type":"converter:dataframe-to-series","inputValues":[],"coords":{"x":681.3534597222224,"y":61.413150531683954},"properties":[{"id":"column","value":"sex"}]},"ky9jt3xk005v3f616k02phfv":{"name":"DataFrame To Series","type":"converter:dataframe-to-series","inputValues":[],"coords":{"x":684.6039333333335,"y":176.61643733723955},"properties":[{"id":"column","value":"Count"}]},"ky9km7pt002o3f61v2zq240g":{"name":"Bar Chart","type":"chart:Output:bar-chart-output","inputValues":[],"coords":{"x":887,"y":103},"properties":[{"id":"title","value":"Survived based on Sex"}]},"ky9koorf00383f61j74qn6vx":{"name":"DataFrame Loc","type":"dataframe:Query:loc-dataframe","inputValues":[],"coords":{"x":231.43999999999994,"y":225.67999999999992},"properties":[{"id":"rows","value":"survived == 0"}]},"ky9kpdi1003s3f61mf4r9uys":{"name":"Group Count","type":"dataframe:Grouping:group-count-dataframe","inputValues":[],"coords":{"x":440.2399999999999,"y":287.59999999999997},"properties":[{"id":"groupColumns","value":"sex"},{"id":"isPercent","value":true}]},"ky9kpujf003w3f61qv0zmxn1":{"name":"DataFrame To Series","type":"converter:dataframe-to-series","inputValues":[],"coords":{"x":686.0799999999999,"y":277.11999999999995},"properties":[{"id":"column","value":"sex"}]},"ky9kpw2f00403f616jtm7b12":{"name":"DataFrame To Series","type":"converter:dataframe-to-series","inputValues":[],"coords":{"x":687.1199999999999,"y":370.31999999999994},"properties":[{"id":"column","value":"Count"}]},"ky9kqmin00503f61ln7v99bh":{"name":"Bar Chart","type":"chart:Output:bar-chart-output","inputValues":[],"coords":{"x":893.8399999999997,"y":289.03999999999996},"properties":[{"id":"title","value":"Not Survived based on Sex"}]},"ky9ktew2007k3f619ff4l21r":{"name":"DataFrame To Series","type":"converter:dataframe-to-series","inputValues":[],"coords":{"x":458.9599999999999,"y":477.6799999999999},"properties":[{"id":"column","value":"age"}]},"ky9ktk62007o3f61tdpk2d57":{"name":"Histogram","type":"dataframe:Descriptive:histogram","inputValues":[],"coords":{"x":670.2399999999999,"y":481.59999999999997},"properties":[{"id":"name","value":"AgeCount"}]},"ky9kuanh008c3f61emqnmnxg":{"name":"Line Chart","type":"chart:Output:line-chart-output","inputValues":[],"coords":{"x":892.4000000000001,"y":476.2399999999999},"properties":[{"id":"title","value":"Survived based on Age"}]}}}},"sources":{"ky7ukwew00003f61vd3yuohz":{"name":"Titanic Data","type":"CSV"}},"variables":{"ky7urkv2005c3f61yt9li8pj":{"name":"Clean Num Data","type":"DataFrame"}}}}}